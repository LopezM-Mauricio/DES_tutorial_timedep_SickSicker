l_event_history_strategies[[j]]       <- as.data.table(dt_event_history)
}
## Store event-history for all strategies
l_event_history_strategies$A            <- l_event_history_strategies[[1]]
l_event_history_strategies$AB           <- l_event_history_strategies[[2]]
names(l_event_history_strategies)       <- c(strategies, "A","AB")
# B. Compute Economic Outcomes
l_cea_params$l_event_history_strategies <- l_event_history_strategies
l_cea_PSA_iter                          <- cea_psa_fn(l_cea_params = l_cea_params)
df_ce                                   <- c(l_cea_PSA_iter$Cost, l_cea_PSA_iter$Effect)
}
# Extract costs and effects from the PSA dataset
df_c <- df_ce[, 1:n_str]
df_e <- df_ce[, (n_str + 1):(2*n_str)]
# Stop clusters
parallel::stopCluster(cl)
# ------------------------------------------------------------------------ #
# PSA Data Object ----
# #* Function included in "R/Functions.R" The latest version can be found in `dampack` package
l_psa <- make_psa_obj(cost          = df_c,
effectiveness = df_e,
parameters    = df_psa_input,
strategies    = v_names_str)
l_psa$strategies              <- v_names_str
colnames(l_psa$effectiveness) <- v_names_str
colnames(l_psa$cost)          <- v_names_str
# ------------------------------------------------------------------------ #
# Plots  -----
# ------------------------------------------------------------------------ #
# Vector with willingness-to-pay (WTP) thresholds.
v_wtp <- seq(0, 200000, by = 5000)
txtsize <- 13
#------------------- #
## Cost-Effectiveness Scatter plot ----
#------------------- #
#* Function `plot.psa` included in "R/Functions.R"; depends on `tidyr` and `ellipse` packages.
#* The latest version can be found in `dampack` package
gg_scattter <- plot.psa(l_psa, txtsize = txtsize) +
scale_color_viridis_d( option = "magma",begin = 0.1,end = 0.8, direction = 1)+
scale_fill_viridis_d( option = "magma",begin = 0.1,end = 0.8, direction = 1)+
theme_bw(base_size = 18)+
scale_y_continuous("Cost (Thousand $)",
breaks = number_ticks(10),
labels = function(x) x/1000) +
xlab("Effectiveness (QALYs)") +
guides(col = guide_legend(nrow = 1)) +
theme(legend.position = "none")
gg_scattter
#------------------- #
## Incremental cost-effectiveness ratios (ICERs) with probabilistic output ----
#------------------- #
#* Compute expected costs and effects for each strategy from the PSA
#* Function included in "R/Functions.R". The latest version can be found in `dampack` package
df_out_ce_psa <- summary(l_psa)
#* Function `calculate_icers` included in "R/Functions.R"; depends on the `dplyr` package
#* The latest version can be found in `dampack` package
df_cea_psa <-  calculate_icers(cost       = df_out_ce_psa$meanCost,
effect     = df_out_ce_psa$meanEffect,
strategies = df_out_ce_psa$Strategy)
#------------------- #
## CEA Frontier with probabilistic output ----
#------------------- #
#* Function `plot.icers` included in "R/Functions.R"; depends on the `ggplot2`  and `ggrepel` packages.
#* The latest version can be found in `dampack` package
p_icers<- plot.icers(df_cea_psa, label = "all", txtsize = txtsize) +
#expand_limits(x = max(table_cea$QALYs) + 0.1) +
theme(legend.position = "none")
p_icers
# Combine CEA table with CE-F curve
df_cea_psa<- tableGrob((df_cea_psa))
p_table <- ggplot()+
annotation_custom(df_cea_psa) +
theme_minimal()
patched_ceaf <- p_icers/ p_table
patched_ceaf
#------------------- #
## Cost-effectiveness acceptability curves (CEACs) and frontier (CEAF) ----
#------------------- #
#* Functions `ceac` and  `plot.ceac` included in "R/Functions.R". The latest versions can be found in `dampack` package
ceac_obj <- ceac(wtp = v_wtp, psa = l_psa)
#* Regions of highest probability of cost-effectiveness for each strategy
summary(ceac_obj)
#* CEAC & CEAF plot
gg_ceac <- plot.ceac(ceac_obj, txtsize = txtsize, xlim = c(0, NA), n_x_ticks = 14) +
scale_color_viridis_d( option = "magma",begin = 0.1,end = 0.8, direction = 1)+
scale_fill_viridis_d( option = "magma",begin = 0.1,end = 0.8, direction = 1) +
theme(legend.position = "right") +
theme_bw(base_size = 18)
gg_ceac
#------------------- #
## Expected Loss Curves (ELCs) ----
#------------------- #
#* Functions `calc_exp_loss` and `plot.exp_loss` included in "R/Functions.R".The latest version can be found in `dampack` package
elc_obj <- calc_exp_loss(wtp = v_wtp, psa = l_psa)
#* ELC plot
gg_elc <- plot.exp_loss(elc_obj, log_y = FALSE,
txtsize = txtsize, xlim = c(0, NA), n_x_ticks = 14,
col = "full") +
scale_color_viridis_d( option = "magma",begin = 0.1,end = 0.8, direction = 1)+
scale_fill_viridis_d( option = "magma",begin = 0.1,end = 0.8, direction = 1)+
# geom_point(aes(shape = as.name("Strategy"))) +
scale_y_continuous("Expected Loss (Thousand $)",
breaks = number_ticks(10),
labels = function(x) x/1000) +
theme_bw(base_size = 18) +
theme(legend.position = "none")
gg_elc
#------------------- #
## Expected value of perfect information (EVPI) ----
#------------------- #
#* Functions `calc_evpi` and `plot.evpi` included in "R/Functions.R". The latest version can be found in `dampack` package
evpi <- calc_evpi(wtp = v_wtp, psa = l_psa)
#* EVPI plot
gg_evpi <- plot.evpi(evpi, effect_units = "QALY",
txtsize = txtsize, xlim = c(0, NA), n_x_ticks = 14) +
scale_y_continuous("EVPI (Thousand $)",
breaks = number_ticks(10),
labels = function(x) x/1000)
gg_evpi
#------------------- #
## Combined Plot PSA ----
#------------------- #
main_plot <- (gg_scattter + gg_ceac) / (gg_elc + gg_evpi)  +
plot_layout(guides = "collect")+
plot_annotation(tag_levels = 'A',
title = "PSA-based Economic Outcomes",
subtitle = "")& theme(
plot.title = element_text(size = 22, face = "bold", hjust = 0.5)
)
main_plot<- main_plot + canvas( width  = 28,
height = 20,
units  = c("in"),
dpi    = 200)
main_plot
# ----------------------------------- #
# ----------------------------------- #
# STOP CLUSTER
stopCluster(cl)
#------------------------------------------------------------------------------#
# AUXILIARY MODULE B:  CONVERGENCE ANALYSIS
# SICK SICKER MODEL WITH RECURRENCE
#* Author: Mauricio Lopez-Mendez <mlopezme@stanford.edu> (Stanford Health Policy)
#* Co-authors:
#* - Jeremy Goldhaber-Fiebert <jeremygf@stanford.edu> (Stanford Health Policy)
#* - Fernando Alarid-Escudero <falarid@stanford.edu> (Stanford Health Policy)
#* Please cite the article when using this code
#* link[]
#* To program this tutorial we used:
#* R version 4.2.1 (2022-06-23)
#* Platform: aarch64-apple-darwin20 (64-bit)
#* Running under: Mac OS 12.5
#* RStudio: Version 2022.07.1+554
#------------------------------------------------------------------------------#
# Description ----
#* We illustrate how to assess the convergence of the state occupancy estimator
#* as we increase the simulation sample size. State occupancy is recovered from
#* the output of the DES by computing the proportion of simulated people in a given state
#* at a given event time (Monte Carlo integration). As we increase the simulation sample size,
#* the Monte Carlo standard error shrinks  around the estimator of
#* state occupancy.
#------------------------------------------------------------------------------#
# Initial setup ----
rm(list = ls())    # remove any variables in R's memory
gc()               # clean working memory
#------------------------------------------------------------------------------#
## Load packages ----
library("data.table"  )
library("dplyr"       )
library("tidyr"       )
library("reshape2"    )
library("ggplot2"     )
library("ggrepel"     )
library("gridExtra"   )
library("ellipse"     )
library("ggview"      )
library("scales"      )
library("patchwork"   )
library("dampack"     )
library("doParallel"  )
library("parallel"    )
library("foreach"     )
library("stats"       )
library("MethylCapSig")
library("survival"    )
library("flexsurv"    )
library("devtools"    )
## Load supplementary functions ----
source("R/DES_functions.R") # DES specific
source("R/Functions.R")     # General utility functions
#------------------------------------------------------------------------------#
# Initialize Parameters ----
#* We want to pass parameters seamlessly through our function sim_next_event(),
#* for this we can declare initial parameters in a list. Here we pass them through
#* a function `init_param` that will return such list `l_params` and also include the baseline data table
#* `dt_baseline` as an object of that list, now named `dt_next_event`.
l_params <- init_params(
# Sim. params
# Time horizon
time_init        = 25    ,
time_end         = 100   ,
# Sim. sample size
n_sim            = 1e2   ,
# dt_baseline information
## initial age
age_init         = 25    ,
## sex group
Sex_grp          = "Total",
## initial state
state_init       = "H"   ,
# State Space
v_states         = c("H",                                              # Healthy (H)
"S1",                                             # Sick (S1)
"S2",                                             # Sicker (S2)
"D"),                                             # Dead (D)
# Indexed Adjacency Matrix
#* Zero entries indicate no transition between pairs of states,
#* Nonzero positive entries index possible transitions in arbitrary order
m_Tr_r           = matrix(c(0,1,0,2,
3,0,4,5,
0,0,0,6,
0,0,0,0),
nrow = 4, ncol = 4, byrow = TRUE,
dimnames = list(c("H", "S1","S2","D"),
c("H", "S1","S2","D"))),
# Transition Rates
## Mortality
#* we specify subfolder in project to load Life Tables
lifetable        = "Inputs/all_cause_mortality.Rda",
## Hazard Ratio while being S1
hr_S1            =    3,
## Hazard Ratio while being S2
hr_S2            =    10,
## Other transitions
## H  -> S1, constant rate ~Exp(r_HS1)
r_HS1            =    0.15,
## S1 -> H,  constant rate ~Exp(r_S1H)
r_S1H            =    0.5,
## S1 -> S2, state-residency time dependent ~ Weibull(r_S1S2_scale_ph, r_S1S2_shape)
##* PH parameterization
r_S1S2_scale_ph  =    0.08,
r_S1S2_shape     =    1.1,
# Strategy
#* Can be any of "SoC", "A", "B", "AB".
#* Only B and AB, affect transitions rates,
strategy         =    "SoC",
# Tx Effects that affect state-transitions
#* Effectiveness of strategy B hazard ratio
#* of becoming Sicker when Sick under treatment B
hr_S1S2_trtB = 0.6
)
#------------------------------------------------------------------------------#
# -------------------------------- #
# Distributed Implementation ------
#  ------------------------------- #
## Cluster Setup ----
# Num. of Cores
no_cores    <- parallel::detectCores()    # recommended when not sharing computing resources
# cores_90pct <- as.integer(.90 * no_cores) # aggressive  when shared resources
cores_85pct <- as.integer(.85 * no_cores) # aggressive  when shared resources
# cores_75pct <- as.integer(.75 * no_cores) # aggressive  when shared resources
# cores_50pct <- as.integer(.5  * no_cores) # recommended when shared resources
# cores_25pct <- as.integer(.25 * no_cores) # recommended when shared resources
os_info <- Sys.info()
os <- os_info[1]
if (os == "Darwin") { # Apple Kernel
# Initialize cluster object
cl <- parallel::makeForkCluster(cores_50pct)
# Register clusters
doParallel::registerDoParallel(cl)
}
#------------------------------------------------------------------------------#
# AUXILIARY MODULE B:  CONVERGENCE ANALYSIS
# SICK SICKER MODEL WITH RECURRENCE
#* Author: Mauricio Lopez-Mendez <mlopezme@stanford.edu> (Stanford Health Policy)
#* Co-authors:
#* - Jeremy Goldhaber-Fiebert <jeremygf@stanford.edu> (Stanford Health Policy)
#* - Fernando Alarid-Escudero <falarid@stanford.edu> (Stanford Health Policy)
#* Please cite the article when using this code
#* link[]
#* To program this tutorial we used:
#* R version 4.2.1 (2022-06-23)
#* Platform: aarch64-apple-darwin20 (64-bit)
#* Running under: Mac OS 12.5
#* RStudio: Version 2022.07.1+554
#------------------------------------------------------------------------------#
# Description ----
#* We illustrate how to assess the convergence of the state occupancy estimator
#* as we increase the simulation sample size. State occupancy is recovered from
#* the output of the DES by computing the proportion of simulated people in a given state
#* at a given event time (Monte Carlo integration). As we increase the simulation sample size,
#* the Monte Carlo standard error shrinks  around the estimator of
#* state occupancy.
#------------------------------------------------------------------------------#
# Initial setup ----
rm(list = ls())    # remove any variables in R's memory
gc()               # clean working memory
#------------------------------------------------------------------------------#
## Load packages ----
library("data.table"  )
library("dplyr"       )
library("tidyr"       )
library("reshape2"    )
library("ggplot2"     )
library("ggrepel"     )
library("gridExtra"   )
library("ellipse"     )
library("ggview"      )
library("scales"      )
library("patchwork"   )
library("dampack"     )
library("doParallel"  )
library("parallel"    )
library("foreach"     )
library("stats"       )
library("MethylCapSig")
library("survival"    )
library("flexsurv"    )
library("devtools"    )
## Load supplementary functions ----
source("R/DES_functions.R") # DES specific
source("R/Functions.R")     # General utility functions
#------------------------------------------------------------------------------#
# Initialize Parameters ----
#* We want to pass parameters seamlessly through our function sim_next_event(),
#* for this we can declare initial parameters in a list. Here we pass them through
#* a function `init_param` that will return such list `l_params` and also include the baseline data table
#* `dt_baseline` as an object of that list, now named `dt_next_event`.
l_params <- init_params(
# Sim. params
# Time horizon
time_init        = 25    ,
time_end         = 100   ,
# Sim. sample size
n_sim            = 1e2   ,
# dt_baseline information
## initial age
age_init         = 25    ,
## sex group
Sex_grp          = "Total",
## initial state
state_init       = "H"   ,
# State Space
v_states         = c("H",                                              # Healthy (H)
"S1",                                             # Sick (S1)
"S2",                                             # Sicker (S2)
"D"),                                             # Dead (D)
# Indexed Adjacency Matrix
#* Zero entries indicate no transition between pairs of states,
#* Nonzero positive entries index possible transitions in arbitrary order
m_Tr_r           = matrix(c(0,1,0,2,
3,0,4,5,
0,0,0,6,
0,0,0,0),
nrow = 4, ncol = 4, byrow = TRUE,
dimnames = list(c("H", "S1","S2","D"),
c("H", "S1","S2","D"))),
# Transition Rates
## Mortality
#* we specify subfolder in project to load Life Tables
lifetable        = "Inputs/all_cause_mortality.Rda",
## Hazard Ratio while being S1
hr_S1            =    3,
## Hazard Ratio while being S2
hr_S2            =    10,
## Other transitions
## H  -> S1, constant rate ~Exp(r_HS1)
r_HS1            =    0.15,
## S1 -> H,  constant rate ~Exp(r_S1H)
r_S1H            =    0.5,
## S1 -> S2, state-residency time dependent ~ Weibull(r_S1S2_scale_ph, r_S1S2_shape)
##* PH parameterization
r_S1S2_scale_ph  =    0.08,
r_S1S2_shape     =    1.1,
# Strategy
#* Can be any of "SoC", "A", "B", "AB".
#* Only B and AB, affect transitions rates,
strategy         =    "SoC",
# Tx Effects that affect state-transitions
#* Effectiveness of strategy B hazard ratio
#* of becoming Sicker when Sick under treatment B
hr_S1S2_trtB = 0.6
)
#------------------------------------------------------------------------------#
# -------------------------------- #
# Distributed Implementation ------
#  ------------------------------- #
## Cluster Setup ----
# Num. of Cores
no_cores_all  <- parallel::detectCores()-1      # recommended when not sharing computing resources
cores_90pct   <- as.integer(.90 * no_cores_all) # aggressive  when shared resources
cores_85pct   <- as.integer(.85 * no_cores_all) # aggressive  when shared resources
cores_75pct   <- as.integer(.75 * no_cores_all) # aggressive  when shared resources
cores_50pct   <- as.integer(.5  * no_cores_all) # recommended when shared resources
cores_25pct   <- as.integer(.25 * no_cores_all) # recommended when shared resources
os_info <- Sys.info()
os <- os_info[1]
no_cores <- cores_85pct
if (os == "Darwin") { # Apple Kernel
# Initialize cluster object
cl <- parallel::makeForkCluster(no_cores)
# Register clusters
doParallel::registerDoParallel(cl)
}
if (os == "linux") {
# Initialize cluster object
cl <- parallel::makeCluster(no_cores)
# Register clusters
doParallel::registerDoMC(cl)
}
if (os == "windows") {
# Initialize cluster object
cl <- parallel::makeCluster(no_cores)
# Register clusters
doParallel::registerDoParallel(cl)
}
## Run distributed implementation ----
# Set seed for reproducibility
n_seed            <- 2
set.seed(n_seed)
# batch and sim sample size
v_n_sim     <- c(1e2,1e3,1e4,1e5)   # iterate over
v_n_batch   <- c(5e1,1e2,1e3)       # fix one
k <- v_n_batch[1]
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
# WARNING: DO NOT RUN THE NEXT CHUNK UNLESS YOU HAVE ENOUGH COMPUTING RESOURCES
# Should be fine with M1 Apple or similar
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
#* Function  `run_parallel_model` implements a distributed version of the DES
#* k times for a given sim sample size,  calls function `obtain_model_grid_trace` to
#* compute the trace matrix approximation in discrete time k times.
#* Trace Matrices  are stored in an array `a_grid_trace_byState`.
#* Function `batch_summary` summarizes the k trace matrices and returns different quantiles, mean and SE of
#* state occupancy for a give simulation sample size.
# dir.create("analysis", showWarnings = FALSE) # Create directory if it doesn't exist
# # ------------------ #
# ## run for n_sim 1e2
l_inputs                     <- init_params(n_sim = v_n_sim[1])
a_grid_k_5e1_b_size_1e2      <- run_parallel_model(model_fn = obtain_model_grid_trace, l_inputs = l_inputs, k=k)
# save(a_grid_k_5e1_b_size_1e2, file="analysis/a_grid_k_5e1_b_size_1e2.RData")
Summary
batch_summary_k_5e1_b_1e2    <- batch_summary(array_grid = a_grid_k_5e1_b_size_1e2, k = k, n_sim = v_n_sim[1])
rm(a_grid_k_5e1_b_size_1e2)
# # ------------------ #
# ## run for  n_sim 1e3
l_inputs                     <- init_params(n_sim = v_n_sim[2])
a_grid_k_5e1_b_size_1e3      <- run_parallel_model(model_fn = obtain_model_grid_trace, l_inputs = l_inputs, k=k)
# save(a_grid_k_5e1_b_size_1e3, file="analysis/a_grid_k_5e1_b_size_1e3.RData")
# Summary
batch_summary_k_5e1_b_1e3    <- batch_summary(array_grid = a_grid_k_5e1_b_size_1e3, k = k, n_sim = v_n_sim[2])
rm(a_grid_k_5e1_b_size_1e3)
# # ------------------ #
# ## run for n_sim 1e5
l_inputs <- init_params(n_sim = v_n_sim[4])
a_grid_k_5e1_b_size_1e5 <- run_parallel_model(model_fn = obtain_model_grid_trace, l_inputs = l_inputs, k=k)
# save(a_grid_k_5e1_b_size_1e5, file="analysis/a_grid_k_5e1_b_size_1e5.RData")
# Summary
batch_summary_k_5e1_b_1e5    <- batch_summary(array_grid = a_grid_k_5e1_b_size_1e5, k = k, n_sim = v_n_sim[4])
rm(a_grid_k_5e1_b_size_1e5)
# STOP CLUSTER
stopCluster(cl)
#------------------------------------------------------------------------------#
#------------------------------------------------------------------------------#
batch_summary_all <- as.data.frame(rbind(batch_summary_k_5e1_b_1e2,
batch_summary_k_5e1_b_1e3,
batch_summary_k_5e1_b_1e5)) %>%
mutate(
Sim_n = ifelse(n_sim == 100, "Sim. sample size = 1e2",
ifelse(n_sim == 1000, "Sim. sample size = 1e3",
"Sim. sample size = 1e5"))
) %>% mutate( Sim_n = factor(Sim_n, levels = c("Sim. sample size = 1e2","Sim. sample size = 1e3","Sim. sample size = 1e5") ),
State = factor(State, levels = c("Healthy", "Sick","Sicker", "Dead")))
table(batch_summary_all$n_sim)
plot_convergence1<- ggplot(batch_summary_all,aes( x= T_n, y = Mean, color = State, fill =State))+
geom_line()+
geom_ribbon( aes(ymin = Q025, ymax = Q975), alpha = .2, linewidth = 0.2 )+
# Titles and Labs
xlab("Time (years)") +
ylab("State Occupancy (Proportion)")+
labs(title    = "Median State Occupancy over Time by Simulation Sample Size",
subtitle = "Confidence Bounds(2.5%,97.5%), Batch Size = 5e1")+
#Grid
scale_y_continuous(breaks = seq(0, 1, by = 0.1),
minor_breaks = seq(0, 1, by = 0.05))+
# Colors
scale_color_viridis_d(option = "H",begin = 0, end = 1,direction = 1, guide = "none") +
scale_fill_viridis_d(option =  "H",begin = 0, end = 1,direction = 1, name = "Health States") +
# Theme
theme_minimal(base_size = 28)+
theme(
strip.background = element_rect(fill = "lightgray", color = "NA", linewidth = 0.5),
strip.text = element_text(face = "bold"),
panel.background = element_rect(fill = "white", color = "gray90"),
panel.grid = element_line(color = "gray90"),
axis.text.x = element_text(size = 16, angle = 0, color = "black"),
axis.text.y = element_text(size = 16, angle = 0, color = "black"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
plot.title    = element_text( face = "bold"),
plot.subtitle = element_text(face = "italic"),
legend.position = "bottom"
)+
facet_wrap(~Sim_n)
plot_convergence1
require(ggview)
main_plot<- plot_convergence1 + canvas( width  = 28,
height = 20,
units  = c("in"),
dpi    = 200)
main_plot
k
